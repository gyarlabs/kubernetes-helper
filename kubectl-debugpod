#!/bin/bash

set -e

NAMESPACE="default"
NAME="debugpod"
IMAGE="arsaphone/debugpod:v2"
STAY=0
NODE=""
CMD="/bin/bash"
CLUSTER_CHECK=0
CLUSTER_CMD=""
SECRET_MODE=0
SECRET_NAMESPACE=""
SECRET_NAME=""
DECODE=0

# Help message
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  cat <<EOF
kubectl debugpod - A Kubernetes CLI plugin to launch temporary debug pods

USAGE:
  kubectl debugpod [flags]

FLAGS:
  -n, --namespace NS       Target namespace (default: "default")
      --node NODE          Schedule the pod to a specific node
      --stay               Don't auto-delete the pod after exit
      --bash               Use /bin/bash as the shell (default is /bin/sh)
      --cluster-check      Run k8sgpt analysis (accepts additional k8sgpt args)
      --secrets [NS] [NAME] Get secrets (optional namespace and name)
      --decode             Base64-decode secret values
  -h, --help               Show this help message and exit

EXAMPLES:
  kubectl debugpod
  kubectl debugpod --node ip-10-0-0-1.ec2.internal
  kubectl debugpod --cluster-check --explain
  kubectl debugpod --secrets
  kubectl debugpod --secrets dev
  kubectl debugpod --secrets dev my-secret --decode
EOF
  exit 0
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -n|--namespace) NAMESPACE="$2"; shift ;;
    --name) NAME="$2"; shift ;;
    --image) IMAGE="$2"; shift ;;
    --node) NODE="$2"; shift ;;
    --stay) STAY=1 ;;
    --bash) CMD="/bin/sh" ;;
    --cluster-check)
      CLUSTER_CHECK=1
      shift
      while [[ $# -gt 0 && ! "$1" =~ ^-- ]]; do
        CLUSTER_CMD+="$1 "
        shift
      done
      ;;
    --secrets)
      SECRET_MODE=1
      shift
      if [[ $# -gt 0 && ! "$1" =~ ^-- ]]; then
        SECRET_NAMESPACE="$1"
        shift
      fi
      if [[ $# -gt 0 && ! "$1" =~ ^-- ]]; then
        SECRET_NAME="$1"
        shift
      fi
      ;;
    --decode)
      DECODE=1
      ;;
    -h|--help)
      echo "Use --help to see usage"
      exit 0
      ;;
    *) echo "Unknown option: $1"; exit 1 ;;
  esac
done

# Secrets logic
if [[ "$SECRET_MODE" -eq 1 ]]; then
  ns_opt="--all-namespaces"
  [[ -n "$SECRET_NAMESPACE" ]] && ns_opt="-n $SECRET_NAMESPACE"

  if [[ -n "$SECRET_NAME" ]]; then
    secrets=$(kubectl get secret "$SECRET_NAME" $ns_opt -o json)
  else
    secrets=$(kubectl get secrets $ns_opt -o json)
  fi

  echo "$secrets" | jq -r '
    .items[] | 
    "Namespace: \(.metadata.namespace)\nName: \(.metadata.name)\nType: \(.type)\nData:\n" +
    (
      if $DECODE then 
        (.data | to_entries[] | "  \(.key): \(.value | @base64d)")
      else 
        (.data | to_entries[] | "  \(.key): \(.value)")
      end | join("\n")
    ) + "\n---"
  ' --argjson DECODE "$DECODE"

  exit 0
fi

# RBAC for k8sgpt
if [[ "$CLUSTER_CHECK" -eq 1 ]]; then
  CMD="k8sgpt ${CLUSTER_CMD:-analyze --output text}"

  kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-reader
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "endpoints", "services", "configmaps", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["cronjobs"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
  verbs: ["get", "list", "watch"]
EOF

  kubectl apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${NAME}-sa
  namespace: ${NAMESPACE}
EOF

  kubectl delete clusterrolebinding "${NAME}-binding" --ignore-not-found=true

  kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${NAME}-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-reader
subjects:
- kind: ServiceAccount
  name: ${NAME}-sa
  namespace: ${NAMESPACE}
EOF
fi

# Deploy debug pod
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: ${NAME}
  namespace: ${NAMESPACE}
  labels:
    app: debugpod
spec:
  $( [[ "$CLUSTER_CHECK" -eq 1 ]] && echo "serviceAccountName: ${NAME}-sa" )
  containers:
  - name: debug
    image: ${IMAGE}
    command: ["/bin/sh", "-c", "${CMD}"]
    stdin: true
    tty: true
  restartPolicy: Never
  $( [[ -n "$NODE" ]] && echo "nodeName: \"$NODE\"" )
EOF

kubectl wait --for=condition=Ready pod "$NAME" -n "$NAMESPACE" --timeout=30s
kubectl -n "$NAMESPACE" attach -it "$NAME"

# Cleanup
if [[ "$STAY" -eq 0 ]]; then
  kubectl delete pod "$NAME" -n "$NAMESPACE"
  if [[ "$CLUSTER_CHECK" -eq 1 ]]; then
    kubectl delete serviceaccount "${NAME}-sa" -n "$NAMESPACE"
    kubectl delete clusterrolebinding "${NAME}-binding"
    echo "created & enhanced by gyarlabs"
  fi
else
  echo "Pod '$NAME' is left running."
fi
