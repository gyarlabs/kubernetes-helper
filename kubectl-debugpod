#!/bin/bash

set -e

NAMESPACE="default"
NAME="debugpod"
IMAGE="arsaphone/debugpod:v2"
STAY=0
NODE=""
CMD="/bin/sh"
CLUSTER_CHECK=0
K8SGPT_ARGS=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    -n|--namespace) NAMESPACE="$2"; shift ;;
    --name) NAME="$2"; shift ;;
    --image) IMAGE="$2"; shift ;;
    --node) NODE="$2"; shift ;;
    --stay) STAY=1 ;;
    --bash) CMD="/bin/bash" ;;
    --cluster-check)
      CLUSTER_CHECK=1
      CMD="k8sgpt"
      shift
      # take arguments if the cluster-check is parsed
      while [[ $# -gt 0 ]]; do
        K8SGPT_ARGS+=("$1")
        shift
      done
      ;;
    -h|--help)
      echo "Usage: kubectl debugpod [--namespace NS] [--name NAME] [--image IMAGE] [--node NODE] [--stay] [--bash] [--cluster-check [k8sgpt args...]]"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Optional RBAC if cluster-check is parsedd, need to define manually the CR, using system master cannot go idk why
if [[ "$CLUSTER_CHECK" -eq 1 ]]; then
  kubectl apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${NAME}-sa
  namespace: ${NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ${NAME}-reader
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "configmaps", "endpoints", "persistentvolumeclaims"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "replicasets"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["cronjobs"]
  verbs: ["get", "list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${NAME}-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ${NAME}-reader
subjects:
- kind: ServiceAccount
  name: ${NAME}-sa
  namespace: ${NAMESPACE}
EOF
fi

#need to make equal==true to avoid sa not found when not goin to use --cluster-check
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: ${NAME}
  namespace: ${NAMESPACE}
  labels:
    app: debugpod
spec:
  serviceAccountName: ${CLUSTER_CHECK:+${NAME}-sa}
  containers:
  - name: debug
    image: ${IMAGE}
    command: ["${CMD}"]
    args: [$(printf '"%s", ' "${K8SGPT_ARGS[@]}" | sed 's/, $//')]
    stdin: true
    tty: true
  restartPolicy: Never
  $( [[ -n "$NODE" ]] && echo "nodeName: \"$NODE\"" )
EOF

kubectl wait --for=condition=Ready pod "$NAME" -n "$NAMESPACE" --timeout=30s
kubectl -n "$NAMESPACE" attach -it "$NAME"

if [[ "$STAY" -eq 0 ]]; then
  kubectl delete pod "$NAME" -n "$NAMESPACE"
  [[ "$CLUSTER_CHECK" -eq 1 ]] && kubectl delete serviceaccount "${NAME}-sa" -n "$NAMESPACE"
  [[ "$CLUSTER_CHECK" -eq 1 ]] && kubectl delete clusterrolebinding "${NAME}-binding"
  [[ "$CLUSTER_CHECK" -eq 1 ]] && kubectl delete clusterrole "${NAME}-reader"
else
  echo "Pod '$NAME' is left running."
  echo "enhanced & maintained by egyardian".
fi